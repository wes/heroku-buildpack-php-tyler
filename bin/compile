#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

apt-get -y install ruby
apt-get -y install emacs

set -e
set -o pipefail

# START CONFIG
NGINX_VERSION=1.4.4
LIBMCRYPT_VERSION=2.5.8
LIBMEMCACHED_VERSION=1.0.7
PHP_VERSION=5.4.45
NEWRELIC_VERSION=4.9.0.54
S3_URL="https://s3.amazonaws.com/s3.hmt.fm/cedar14"

MANIFEST_FILE="manifest.md5sum"
NGINX_FILE="nginx-${NGINX_VERSION}.tar.gz"
MCRYPT_FILE="libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
MEMCACHED_FILE="libmemcached-${LIBMEMCACHED_VERSION}.tar.gz"
PHP_FILE="php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"
PEARLIB_FILE="pearfiles.tar.gz"

MANIFEST_URL="${S3_URL}/${MANIFEST_FILE}"
NGINX_URL="${S3_URL}/${NGINX_FILE}"
MCRYPT_URL="${S3_URL}/${MCRYPT_FILE}"
MEMCACHED_URL="${S3_URL}/${MEMCACHED_FILE}"
PHP_URL="${S3_URL}/${PHP_FILE}"
NEWRELIC_URL="${S3_URL}/${NEWRELIC_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"
PEAR_LIB="${S3_URL}/${PEARLIB_FILE}"

function indent() {
	c='s/^/       /'
	case $(uname) in
		Darwin) sed -l "$c";;
		*)      sed -u "$c";;
	esac
}

function check_md5() {
	SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
	TARGET="$1"
	SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
	OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
	! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
	TARGET_URL="$1"
	curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
}

BIN_DIR=$(dirname $0)
BUILD_DIR="/app"
CACHE_DIR="/cache"
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
export COMPOSER_HOME="${CACHE_DIR}/.composer"

# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME} ${BUILD_DIR}/.profile.d

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
	echo "-----> Pruning Unused Cached Bundles"
	find . -type f -atime +30 -delete | indent
fi

echo "-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}

# Nginx
echo "-----> Installing Nginx"
if [ -f "${NGINX_FILE}" ]
then
	# check manifest
	if check_md5 "${NGINX_FILE}"
	then
		echo "Bundling Nginx v${NGINX_VERSION}" | indent
		echo ${NGINX_URL} | indent
		download_url ${NGINX_URL}
	else
		echo "Using cached Nginx v${NGINX_VERSION}" | indent
	fi
else
	# fetch
	echo "Bundling Nginx v${NGINX_VERSION}" | indent
	echo ${NGINX_URL} | indent
	download_url ${NGINX_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/nginx
tar xzf ${NGINX_FILE} -C ${BUILD_DIR}/vendor/nginx
sed -i 's/css;/css less;/g' ${BUILD_DIR}/vendor/nginx/conf/mime.types

# libmcrypt
echo "-----> Installing libmcrypt"
if [ -f "${MCRYPT_FILE}" ]
then
	if check_md5 "${MCRYPT_FILE}"
	then
		echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
		echo ${MCRYPT_URL} | indent
		download_url ${MCRYPT_URL}
	else
		echo "Using cached libmcrypt v${LIBMCRYPT_VERSION}" | indent
	fi
else
	echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
	echo ${MCRYPT_URL} | indent
	download_url ${MCRYPT_URL}
fi

tar xzf ${MCRYPT_FILE} -C ${BUILD_DIR}/local

# libmemcached
echo "-----> Installing libmemcached"
if [ -f "${MEMCACHED_FILE}" ]
then
	if check_md5 "${MEMCACHED_FILE}"
	then
		echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
		echo ${MEMCACHED_URL} | indent
		download_url ${MEMCACHED_URL}
	else
		echo "Using cached libmemcached v${LIBMEMCACHED_VERSION}" | indent
	fi
else
	echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
	echo ${MEMCACHED_URL} | indent
	download_url ${MEMCACHED_URL}
fi

tar xzf ${MEMCACHED_FILE} -C ${BUILD_DIR}/local

# PHP
echo "-----> Installing PHP"
if [ -f "$PHP_FILE" ]
then
	if check_md5 "${PHP_FILE}"
	then
		echo "Bundling PHP v${PHP_VERSION}" | indent
		echo ${PHP_URL} | indent
		download_url ${PHP_URL}
	else
		echo "Using cached PHP v${PHP_VERSION}" | indent
	fi
else
	echo "Bundling PHP v${PHP_VERSION}" | indent
	echo ${PHP_URL} | indent
	download_url ${PHP_URL}
fi

mkdir -p ${BUILD_DIR}/vendor/php
tar xzf ${PHP_FILE} -C ${BUILD_DIR}/vendor/php
export PATH="{$PATH}:${BUILD_DIR}/vendor/php/bin"
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${BUILD_DIR}/local/lib"

# Composer Installation
pushd ${BUILD_DIR} > /dev/null
if [ -f "composer.json" ]
then
	echo "-----> Installing dependencies using Composer"
	GIT_DIR_ORIG=${GIT_DIR}
	unset GIT_DIR

	if [ ! -f "composer.phar" ]
	then
		echo "Fetching composer.phar" | indent
		echo ${COMPOSER_URL} | indent
		download_url ${COMPOSER_URL}
	fi

	# do the deed!
	echo "Running: php composer.phar install" | indent
	LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php composer.phar install -n | indent

	export GIT_DIR=${GIT_DIR_ORIG}
fi
popd > /dev/null

# Config files
echo "-----> Copying config files"
cp $LP_DIR/conf/php-fpm.conf ${BUILD_DIR}/vendor/php/etc/php-fpm.conf
cp ${BUILD_DIR}/vendor/php/php/fpm/status.html ${BUILD_DIR}/status.html
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/php.ini
cp -a $LP_DIR/conf/etc.d ${BUILD_DIR}/vendor/php/
cp $LP_DIR/conf/nginx.conf.erb ${BUILD_DIR}/vendor/nginx/conf/nginx.conf.erb
cp -n ${LP_DIR}/.profile.d/* ${BUILD_DIR}/.profile.d/
#erb $LP_DIR/conf/nginx.conf.erb > ${BUILD_DIR}/vendor/nginx/conf/nginx.conf

echo "-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting nginx"

# Override config files if provided in app.
if [ -d /app/conf ]; then

	mkdir -p /app/conf/nginx.d

	if [ -d /app/conf/etc.d ]; then
		cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
	fi

	if [ -r /app/conf/php-fpm.conf ]; then
		cp -f /app/conf/php-fpm.conf /app/vendor/php/etc/php-fpm.conf
	fi

	if [ -r /app/conf/php.ini ]; then
		cp -f /app/conf/php.ini /app/vendor/php/php.ini
	fi

	if [ -r /app/conf/nginx.conf.erb ]; then
		cp -f /app/conf/nginx.conf.erb /app/vendor/nginx/conf/nginx.conf.erb
	fi

fi

export PORT=80

# Set correct port variable.
erb /app/vendor/nginx/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

if [ -d /app/conf/nginx.d ]; then
	# Parse .erb into .conf.
	for f in /app/conf/nginx.d/*.erb
	do
		if [ -r "\${f}" ];
		then
			erb "\${f}" > "\${f}.conf"
		fi
	done
fi

# Set NEWRELIC key
if [ -x "/app/local/bin/newrelic-license" ]; then
	/app/local/bin/newrelic-license
fi

# Preserve current php-fpm.conf so that env list does
# not go out of hand across restarts.
if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
	cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
else
	cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
fi

# Expose Heroku config vars to PHP-FPM processes
for var in \`env | cut -f1 -d=\`; do
	echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
done

touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log /app/vendor/php/var/log/php-fpm.log /app/vendor/php/var/log/php-errors.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
(tail -f -n 0 /app/vendor/nginx/logs/*.log /app/vendor/php/var/log/*.log /app/local/var/log/newrelic/*.log &)

if [ "\${NEW_RELIC_LICENSE_KEY}" ]; then
	/app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
fi
/app/vendor/php/sbin/php-fpm
/app/vendor/nginx/sbin/nginx
EOF
chmod +x boot.sh

echo "-----> Now Installing Local Mysql Server"

/etc/init.d/apparmor stop
update-rc.d -f apparmor remove
apt-get -y remove apparmor apparmor-utils

groupadd mysql
useradd -r -g mysql mysql

apt-get -y install libaio1

cd /usr/local/
wget --no-check-certificate https://downloads.mariadb.com/archives/mysql-5.6/mysql-5.6.14-linux-glibc2.5-x86_64.tar.gz

tar xvfz mysql-5.6.14-linux-glibc2.5-x86_64.tar.gz
mv mysql-5.6.14-linux-glibc2.5-x86_64 mysql
cd mysql
chown -R mysql .
chgrp -R mysql .
scripts/mysql_install_db --user=mysql
chown -R root .
chown -R mysql data
cp support-files/mysql.server /etc/init.d/mysql.server
sed -i 's/sql_mode/#sql_mode/g' /usr/local/mysql/my.cnf
/etc/init.d/mysql.server start
update-rc.d mysql.server defaults
ln -s /usr/local/mysql/bin/* /usr/local/bin/
mysql_secure_installation

echo "-----> Now Finished MySQL Install"

echo "-----> Setting up Symlinks"

ln -s /vagrant/global /app/global
ln -s /vagrant/admin /app/admin
ln -s /vagrant/apps /app/apps

echo "-----> Fixing Permissions on Folders"

chmod 775 /app/vendor/php/bin /app/vendor/php/etc /app/vendor/php/etc.d /app/vendor/php/include /app/vendor/php/lib /app/vendor/php/php /app/vendor/php/sbin /app/vendor/php/var /app/vendor/php/lib/php

chmod -R a+r /app/vendor/php/lib/php
chmod -R g+r /app/vendor/php/lib/php

echo "-----> Installing Local Redis Server"

apt-get install redis-server

echo "-----> Finished Installing Redis"

echo "-----> Finished Compiling"

echo "-----> If you need to import a fresh copy of the DB run this script: /root/heroku-buildpack-php-tyler/console/hmt_sync_db.sh"

echo "-----> When ready to get going, just launch the /app/boot.sh"
